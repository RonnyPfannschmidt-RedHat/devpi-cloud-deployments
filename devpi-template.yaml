apiVersion: v1
kind: Template
labels:
  template: devpi
metadata:
  name: devpi
  annotations:
    description: deploys devpi with nginx fronend and other relevant stuff
    tags: devpi, private-pypi, dev-pypi
objects:

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "${NAME}-db-storage-pvc"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
    volumeName: "${NAME}-db-storage"

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "${NAME}-file-storage-pvc"
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: 10Gi
    volumeName: "${NAME}-file-storage"

- apiVersion: v1
  kind: Route
  metadata:
    name: "${NAME}-frontend"
  spec:
    host: "${FRONTEND_HOST}"
    to:
      kind: Service
      name: ${NAME}
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Allow

- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}
    annotations:
      description: waits for pypi requests and serves them
  spec:
    ports:
    - name: ${NAME}
      port: 8080
      targetPort: 8081
    selector:
      name: ${NAME}

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: nginx-configs
  data:
    nginx-devpi.conf: |
      server {
          server_name 127.0.0.1 $hostname "";
          listen 8081;
          gzip             on;
          gzip_min_length  2000;
          gzip_proxied     any;
          gzip_types       application/json;

          proxy_read_timeout 60s;
          client_max_body_size 64M;

          # set to where your devpi-server state is on the filesystem
          root /srv/devpi;


          # try serving static files directly
          location ~ /\+f/ {
              # workaround to pass non-GET/HEAD requests through to the named location below
              error_page 418 = @proxy_to_app;
              if ($request_method !~ (GET)|(HEAD)) {
                  return 418;
              }

              expires max;
              try_files /+files$uri @proxy_to_app;
          }
          # try serving docs directly
          location ~ /\+doc/ {
              try_files $uri @proxy_to_app;
          }
          location / {
              # workaround to pass all requests to / through to the named location below
              error_page 418 = @proxy_to_app;
              return 418;
          }
          location @proxy_to_app {
              proxy_pass http://127.0.0.1:3141;
              proxy_set_header X-outside-url $scheme://$http_host;
              proxy_set_header X-Real-IP $remote_addr;
          }
      }

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: devpi-nginx

- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${NAME}
    annotations:
      description: ""
      openshift.io/image.insecureRepository: "true"
  spec:
    lookupPolicy:
      local: true

- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${NAME}
    annotations:
      description: Building devpi image
      template.alpha.openshift.io/wait-for-ready: "true"
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: "${NAME}:latest"
        #todo: add image update hooks
    source:
      type: Git
      git:
        uri: "${SOURCE_REPOSITORY_URL}"
        ref: "${SOURCE_REPOSITORY_REF}"
      contextDir: ""
      images:
    triggers:
      - type: ConfigChange
    strategy:
      dockerStrategy:
        noCache: true
        env:
        - name: "GIT_SSL_NO_VERIFY"
          value: "true"

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${NAME}"
    annotations:
      description: ""
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${NAME}"
    template:
      metadata:
        name: "${NAME}"
        labels:
          name: "${NAME}"
      spec:
        containers:
        - name: nginx
          command:
          - /usr/libexec/s2i/run
          image: registry.access.redhat.com/rhscl/nginx-114-rhel7
          imagePullPolicy: IfNotPresent
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /opt/app-root/etc/nginx.d
              name: nginx-conf
            - mountPath: /srv/devpi
              name: file-storage
          ports:
          - containerPort: 8081
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 5
            httpGet:
              path: /
              port: 8081
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            httpGet:
              # todo: update with better way to check health and readiness later
              path: /
              port: 8081
        - name: ${NAME}
          image: "${NAME}:latest"
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: DB_HOST
            value: postgresql.$(NAMESPACE).svc
          - name: DB_PORT
            value: '5432'
          - name: DB_NAME
            value: devpi
          - name: DB_USER
            value: devpi
          - name: DB_PASSWORD
            value: devpi
          ports:
          - containerPort: 3141
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 5
            httpGet:
              path: /
              port: 3141
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            httpGet:
              # todo: update with better way to check health and readiness later
              path: /
              port: 3141
          volumeMounts:
          - mountPath: "/srv/devpi"
            name: "file-storage"
        volumes:
        - name: "nginx-conf"
          configMap:
            defaultMode: 420
            items:
              - key: nginx-devpi.conf
                path: nginx-devpi.conf
            name: nginx-configs
        - name: "file-storage"
          persistentVolumeClaim:
            claimName: "${NAME}-file-storage-pvc"
      triggers:
      - type: ImageChange
      - type: ConfigChange

- kind: Service
  apiVersion: v1
  metadata:
    name: postgresql
    annotations:
      description: Exposes the database server
  spec:
    ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
    selector:
      name: postgresql

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: postgresql
    annotations:
      description: Defines how to deploy the database
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    replicas: 1
    selector:
      name: postgresql
    template:
      metadata:
        name: postgresql
        labels:
          name: postgresql
      spec:
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "${NAME}-db-storage-pvc"
        containers:
        - name: postgresql
          image: registry.access.redhat.com/rhscl/postgresql-10-rhel7
          ports:
          - containerPort: 5432
            protocol: TCP
          dnsPolicy: ClusterFirst
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 5
            exec:
              command:
              - "/usr/libexec/check-container"
          livenessProbe:
            timeoutSeconds: 10
            initialDelaySeconds: 120
            exec:
              command:
              - "/usr/libexec/check-container"
              - "--live"
          volumeMounts:
          - name: data
            mountPath: "/var/lib/pgsql/data"
          env:
          - name: POSTGRESQL_USER
            value: devpi
          - name: POSTGRESQL_PASSWORD
            value: devpi
          - name: POSTGRESQL_ADMIN_PASSWORD
            value: admin
          - name: POSTGRESQL_DATABASE
            value: devpi

parameters:
- name: NAME
  required: true
  displayName: name which will be used everywhere to give objects names and add labels
  description: name which will be used everywhere to give objects names and add labels
  value: devpi

- name: SOURCE_REPOSITORY_URL
  required: true
  displayName: repo url with docker file
  description: repo url with docker file
  value: https://github.com/RonnyPfannschmidt-RedHat/devpi-cloud-deployments.git

- name: SOURCE_REPOSITORY_REF
  required: true
  displayName: branch
  description: branch
  value: master

- name: FRONTEND_HOST
  required: true
  displayName: devpi host to expose
  description: devpi host to expose